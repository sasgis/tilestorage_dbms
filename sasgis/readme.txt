А.

Файл TileStorage_DBMS.dll надо положить в папку с SASPlanet.exe.

Создать подпапку DBMS и в неё сложить:

1. Необходимые библиотеки для dbExpress типа dbxoodbc.dll.

2. Файлы с настройками подключений.
   Это файлы _DBX_TileStorage_DBMS.ini и _ZEOS_TileStorage_DBMS.ini.
   Одноимённые файлы в репозитории приведены исключительно для примера.
   Используйте собственные актуальные настройки и параметры.

3. Скрипты для начального заполнения БД.
   Это файлы TileStorage_DBMS.<XXX>.sql и TileStorage_DBMS.<XXX>.xql.
   В зависимости от типа СУБД <XXX> заменяется на сокращение:
    MS  - Microsoft SQL Server
    ASE - Sybase ASE
    ASA - Sybase ASA
    ORA - Oracle
    IFX - Informix
    DB2 - DB2
    MY  - MySQL
    PG  - PostgreSQL
    MMR - MimerSQL
    FB  - Firebird




Б.

ВНИМАНИЕ!
Создание/установку сервера БД, собственно БД, устройств и прочее (в заависимости от типа СУБД),
и какую-либо их настройку DLL НЕ ВЫПОЛНЯЕТ!
Это относится исключительно к компетенции администратора БД.




В.

Не забудьте в ZMP установить CacheType=7.
А то всё полетит в файловую систему.




Г.

Далее приведено описание файлов _DBX_TileStorage_DBMS.ini и _ZEOS_TileStorage_DBMS.ini.

Файл делится на секции стандартным способом.
В рамках секции описываются параметры ровно одного подключения.

Путь до СУБД-хранилища тайлов в сасе кодируется как S\D\T, где
S - сервер.
D - база (не для всех типов СУБД).
T - таблица (несколько таблиц).

Дабы не усложнять настройки, такое трёхчастное кодирование применяется даже в тех случаях, когда СУБД не делится на различные БД.
В этом случае вместо D можно использовать символ $.

В общем смысле первые 2 части S\D используются для идентификации сущности, к которой производится подключение с указанными настройками.
Несмотря на то что подключение формально осуществляется только к S, при доступе к разным D в рамках S могут использоваться разные настройки.
Поэтому аутентификация выполняется в разрезе S, а настройки подключения - в разрезе S\D.

Не всегда при наличии нескольких БД на одном сервере необходимо указывать реальное D.
Например, если подключение настроено через ODBC, то там указывается конкретная БД.
И в этом случае опять же можно вмето реального имени БД указать $.
В этом смысле надо быть внимательнее при подключении через ODBC и указании реальных имён БД, такая хитрость может не сработать.
Резюме: если подключение выполняется через ODBC - имя секции необходимо указывать как DSN\$, где DSN - имя System DSN из ODBC.
При подключении НЕ через ODBC, а также при работе через ZEOS на наименование секций не накладывается никаких логических ограничений (только формат S\D).

В качестве источников ODBC используются только системные (System DSN).




Д.

В секциях могут использоваться так называемые "внутренние" параметры. Все они начинаются с символа $.
они обрабатываются только в рамках DLL и гарантировано не передаются в драйвер подключения к СУБД.
Описание общих "внутренних" параметров приведено в конце.
Далее в следующих двух разделах приведены описания только обычных параметров, а также таких "внутренних", которые относятся только к конкретному разделу.




Е.

При работе через ZEOS используются следующие имена параметров (с примерами; не все параметры необходимы для конкретного типа СУБД):

Protocol=postgresql
Определяет библиотеки и драйвера СУБД, которые будут использоваться для подключения.

HostName=localhost
Port=5432
Определяет конечную точку подключения. Зависит от типа СУБД. Например для ASE значение HostName указывается как "каталожное" имя сервера (без порта).

Database=sas
Имя БД "внутри" сервера.

User=root
Password=123456
Логин и пароль, используемые для подключения. Пока что хранятся в открытом виде.

Все прочие параметры передаются в драйвер подключения к СУБД и используются для его настройки.
Например для ASE можно указать appname=sas_app - и тогда можно на сервере раздать приоритеты процессам по имени приложения.
Конкретный перечень таких параметров сильно зависит от типа СУБД.




Ё.

При работе через DBX (оно же dbExpress) используются следующие имена параметров (с примерами; не все параметры необходимы для конкретного типа СУБД):

DriverName=Odbc
Имя драйвера для подключения. Значение параметра может быть либо допустимым именем драйвера DBX, либо именем Odbc (для драйвера open-dbexpress).
Драйвер Odbc настраивается полностью автоматически, достаточно только положить dbxoodbc.dll в ту же папку.
Забирается он тут: http://sourceforge.net/projects/open-dbexpress/
В принципе этот параметр может быть единственным в секции, если он имеет значение Odbc, и все прочие параметры подключения настроены в ODBC.
Фактически - это единственный обязательный параметр.
Другие возможные значения кроме Odbc: ASE, MySQL, MSSQL и т.п.

User_Name=SYSADM
Password=SYSADM
Логин и пароль для подключения.

HostName=FooCOMPUTER\FooMSSQL
Database=sas
OS Authentication=TRUE
Параметры для конкретного типа СУБД (здесь - для MSSQL).
Для Odbc надо задавать в настройке ODBC.

ClientAppName=sas_DBMS
ClientCharSet=cp1251
BlobSize=-1
Параметры для конкретного типа СУБД (здесь - для ASE).
Для Odbc надо задавать в настройке ODBC.




Ж.

Список "внутренних" параметров заведомо неполон, так как некоторые из них созданы исключительно для отладки.
Тем не менее необходимо упомянуть следующие:

$SYNC_SQL_MODE=2
Режим синхронизации запросов к серверу БД внутри DLL. Сильно зависит от используемого транспорта и типа СУБД.
Под синхронизацией здесь понимается блокировка одновременного выполнения более чем одного "запроса" (не одной команды SQL).
По умолчанию значение 0 - никакой синхронизации не требуется.
Если указано значение 1 - выполняется общая синхронизация на уровне бизнес-логики.
Например, пока тайл пишется в БД, никакой другой тайл не будет записан в БД или прочитан из БД.
Если указано значение 2 - реализуется промежуточный вариант, синхронизация выполняется только для непосредственных команд SQL к СУБД.
Если в режиме 0 не возникает никаких ошибок, то переключение в более высокие режимы неоправдано с точки зрения производительности.
Правда разница не будет столь велика как сперва кажется, так как время скачивания тайла на порядки больше времени его записи в БД, а читаются тайлы из БД достаточно быстро.

$LOAD_LIBRARY_ALT=C:\Program Files\PostgreSQL\9.2\bin\libpq.dll
$LOAD_LIBRARY=C:\Program Files\Common Files\MariaDBShared\HeidiSQL\libmysql.dll
Перед подключением будет произведена загрузка указанной библиотеки.
Если имя параметра с _ALT - загрузка будет произведена исходя из альтернативного алгоритма поиска DLL.
В этом случае все "дочерние" DLL будут сперва искаться в той же папке, что и указанная DLL.
Если же имя параметра без _ALT - будет использован стандартный алгоритм поиска DLL для "дочерних" библиотек.

